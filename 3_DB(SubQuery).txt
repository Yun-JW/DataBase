DB(SubQuery)서브쿼리

@서브 쿼리(Sub Query)
- 하나의 쿼리가 다른 sql문에 포함되는 구조
- 하나의 쿼리의 결과를 다른 sql문에 전달하기 위해 두 개 이상의 sql문을 하나의 sql문으로 처리하는 방법
- 다른 sql문에 포함된 서브쿼리는 메인 sql문에 사용될 값을 반환하는 역할
- 주의 사항
	1. 괄호()로 감싸서 표현
	2. 쿼리 끝에 세미콜론(;)을 붙이지 않음
	3. ORDER BY 사용 불가

@서브 쿼리의 유형
1. 단일 행 서브 쿼리
	- 서브 쿼리에서 하나의 행만을 조회하여 메인 sql문에 반환
	- 비교 조건에 쓰일 경우 단일 행 비교 연산자(=, >, >=, <, <=, <>)만 사용 가능
# <> 연산자 의미 : 같지 않다.

2. 다중 행 서브 쿼리
	- 서브 쿼리에서 여러 행을 검색하여 메인 sql문에 반환
	- 비교 조건에 쓰일 경우 다중 행 비교 연산자(IN, ANY, ALL, EXISTS) 사용해야 함

@서브 쿼리의 유형
1. 상호 연관 서브 쿼리
	- 독립적인 실행이 가능한 쿼리가 아니라 메인 쿼리의 값을 전달 받아 실행 되는 서브 쿼리
2. 다중 열 서브 쿼리
	- 여러 열을 조회하여 메인 sql문에 반환
	- 조건절에 사용시 비교 대상의 여러 열을 쌍으로 묶어서 비교
3. 스칼라 서브 쿼리
	- 값 하나만 조회하여 반환하는 서브 쿼리
	- 단일 행 단일 열 서브 쿼리
4. 인라인 뷰
	- FROM절에 작성하는 서브 쿼리
	- 일회성 View

@ 서브 쿼리가 사용될 수 있는 곳
SELECT, FROM, WHERE, HAVING, OERDER BY, UPDATE문 SET절, INSERT문의 VALUES절, INSERT문의 VALUES절 대체, CREATE TABLE문

@단일 행 서브 쿼리

@다중 행 서브 쿼리 비교 연산자
IN : 메인 sql문의 비교 조건이 서브 쿼리의 결과 중에서 하나라도 만족하면 참
ANY : 메인 sql문의 비교 조건이 서브 쿼리의 결과 중에서 하나라도 만족하면 참
	IN =   =ANY, >ANY, >=ANY, <ANY, <=ANY
ALL : 메인 sql문의 비교 조건이 서브 쿼리의 결과 중에서 모든 값이 만족하면 참
	>ALL, >=ALL, <ALL, <=ALL
EXISTS : 서브 쿼리의 실행 결과가 존재하면 참
		보통 메인 쿼리의 값이 서브 쿼리의 조건절에 값으로 전달되는 형태로 사용

@다중 행 서브 쿼리 - ANY 연산자 활용
= ANY
	IN연산자와 동일
	서브 쿼리 결과 중 어느 하나라도 일치하면 참
> ANY
	서브 쿼리 결과 중 어느 하나보다도 크면 참
	결과 중 최소 값 비교
< ANY
	서브 쿼리 결과 중 어느 하나보다도 작으면 참
	결과 중 최대값 비교

# AND & OR NULL 비교 연산 주의
AND NULL
TRUE NULL

> ALL
	서브 쿼리 결과 중 모두보다 크면 참
	결과 중 최대값 비교
< ALL
	서브 쿼리 결과 중 모두보다 작으면 참
	결과 중 최소값 비교

@다중 행 서브쿼리 - EXISTS 연산자 활용
- 서브쿼리에서 검색된 결과가 하나라도 존재하면 메인 쿼리 조건절이 참
- 조건에 맞는 행이 있는지의 판단 결과만 이용하고 SELECT절에서 따로 컬럼데이터를 가져오지 않는 형태로 대부분 작성
- 만족하는 행이 존재하면 바로 참 반환
- SEMI JOIN이라고도 불림

@@@서브쿼리 활용@@@

@상호 연관 서브 쿼리
- Main 쿼리와 별도로 족립적인 실행이 불가능한 서브 쿼리
- Main 쿼리가 먼저 실행되어 조회된 값을 서브쿼리에서 참조하는 연관 관계가 있는 서브 쿼리

@다중 열 서브 쿼리
- 여러 열을 조회하는 서브쿼리

@스칼라 서브 쿼리
- 단 하나의 값만을 조회하는 서브쿼리
- 단일 행 단일 열 서브 쿼리
- 하나의 값만이 요구되는 위치에 사용됨
0 일치하는 값이 없을 경우 null 리턴

@인라인 뷰
- FROM절 또는 JOIN절 뒤에 위치하는 서브쿼리
- 서브쿼리의 실행 결과 집합을 마치 테이블처럼 사용하기 위한 방법
	RAW 데이터를 이용한 가공된 결과를 이용하고자 할때 많이 사용
	복잡한 쿼리의 가독성을 높이기 위해 사용하기도 함
- 반드시 별칭 사용해야 함
- 일회성 뷰
	데이터베이스 객체로써 저장되지 않음

# 뷰 만들 때 코드 : CREATE VIEW '이름' AS ~


@@@집합 연산@@@

@집합 연산
- 쿼리 실행 결과를 하나의 집합으로 보고 집합 간의 연산을 수행 할 수 있음
- 두 쿼리에서 조회하는 컬럼의 개수는 같아야 함
- 컬럼 헤더는 아ㅠ쪽에서 기술된 쿼리 기준으로 결정
UNION ALL(합집합 : 두 결과 집합들을 합한 결과(중복 행 포함))
UINONI(합집합 : 두 결과 집합들을 합한 결과(중복 행 제거))
INTERSECT(교집합 : 두 결과 집합들의 공통 행 추출)
EXCEPT(차집합 : 두 결과 집합 중 기준이 되는 집합 어느 한에만 존재하는 행 추출 나열하는 두 쿼리 중 먼저 기술된 앞쪽 쿼리가 기준 집합)







