DB(함수2)_2장_데이터 검색(Select)
@실습 스키마
- 스키마(schema)란? 
 	데이터베이스에서 데이터의 구조를 정의하는 청사진
	즉, 데이터베이스 내에서 데이터가 어떻게 구성되고 저장될지에 대한 정의를 포함한 일종의 설계도

@Select 구문
- 특정 열 조회
- 특정 행 조회
- 특정 행/열 조회
- 여러 테이블의 특정 행/열 조회

@Select 기본 구문
- SELECT * | { [DISTINCT] {{ 컬럼명 | 표현식 } { [AS] [별칭] }, ...}}
	조회하려는 컬럼명 또는 표현식을 나열
	별칭 사용가능

- FROM 테이블 명
	조회하려는 데이터가 저장된 테이블을 명시함

@열 별칭 활용(as)
- 연산이나 함수 호출 등 복잡한 표현식을 별칭을 사용하여 간단하게 만들 수 있음
- 큰 따옴표로 감싸서 작성해야하는 경우
 	SQL구문 분석 시에 문제가 될 수 있는 특수문자들을 포함할 경우
	공백을 포함하는 경우

@중복 행 제거(distinct)
- 조회하는 모든 컬럼의 조합이 일치하는 행을 제거
- 컴럼별로 중복 제거는 불가능
- SELECT절에 한 번만 기술

@선택적 데이터 조회(WHERE절)
- SELECT * | { [DISTINCT} {{ 컬럼명 | 표현식 } { [AS] [별칭] }, ...}}
- FROM 테이블명
- WHERE 조건식 [ {AND | OR}, 조건식 ];

- 결과 집합을 필터링 하기 위한 것
- 테이블에 저장된 데이터 중에서 원하는 데이터만 선택적으로 검색하는 기능
- WHERE절의 조건문은 컬럼 이름, 연산자, 상수, 산술 표현식을 결합하여 다양한 형태로 표현 가능
- 문자와 날짜 타입의 상수 값은 작은 따옴표('')로 묶어서 표현하고 숫자는 그대로 사용
- 제한조건을 여러 개 포함할 수 있으며, 각 각의 제한 조건은 논리 연산자로 연결

@비교 연산자
=
!=, <>
<, <=, >, >=
IS NULL : NULL인지 비교
BETWEEN a AND b : a 이상 b이하의 범위 비교(경계값 포함)
IN (value1, value2, ...) : 목록 안에 일치하는 값이 있는지 비교
LIKE 패턴 : 특정 패턴을 만족하는지 비교
		패턴 표현을 위해 와일드 카드 사용
		% : 0개 이상의 임의의 문자를 의미
		_   : 1개의 임의의 문자를 의미

# NULL 값 : 컬럼에 값이 지정되지 않은 상태를 나타내는 특별한 값
		 0이나 공백과는 다름
		 기본적으로 모든 데이터타입에서 사용가능함
		 NULL값을 이용한 연산 결과에 주의

@논리 연산자
AND, &&
OR, ||
XOR
NOT, !

@Null과 논리 연산
- 자료 참조

@비트 연산자
&, |, ^, ~, <<, >>(부호 유지)

@CASE 연산자
- 사용 방법1 : 값의 동등 비교에 따른 값 반환
- 사용 방법2 : 조건식 분기에 따른 값 반환

@정렬(ORDER BY절)
- 표현법 자료 참조
- SELECT구문 실행 결과를 특정 컬럼 값 기준으로 정렬할 때 사용
- SELECT구문의 마지막에 위치
- 여러 개의 정렬 기준을 사용하면 기술된 순서대로 적용
- 컬럼이름이나 컬럼 별치잉나 컬럼 기술 순서(1, 2..)로 표현 가능
- 정렬 조건
	ASC: 오름차순(기본값)
	DESC: 내림차순

@행 결과 제한(LIMIT절)
- OFFSET n 생략 시 OFFSET 0으로 처리
	첫번째 레코드부터 개수만큼의 의미
- Top N 쿼리 또는 페이징 처리 시 활용
- LIMIT 5, OFFSET 10 = LIMIT 10, 5



