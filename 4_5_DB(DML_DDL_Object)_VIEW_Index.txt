4_5_DB(DML_DDL_Object)_VIEW_Index.txt

@@@ VIEW @@@

@ VIEW
- 테이블이나 또다른 뷰를 기반으로 한 논리적인 가상의 테이블
- 데이터를 갖고 있지 않으나 기반 테이블의 데이터를 보거나 변경할 수 있는 창 같은 역할
- Stored Query라고도 불리는 데이터베이스 객체
- 장점
	1. 복잡한 쿼리문을 뷰로 저장하여 반복적으로 사용 가능(복잡한 조인, 서브 쿼리등을 사용한 경우 효율적)
	2. 뷰에 접근하는 사용자에게 미리 정의된 결과만을 보여줌(뷰에서 조회하는 레코드와 컬럼만 볼 수 있음)
	3. 뷰에 포함되는 컬럼은 베이스 테이블에 영향을 주지 않고 다른 이름으로도 참조 가능
- 단점
	1. 데이터 조작은 제한 사항이 많음

@VIEW의 유형
1. 단순 뷰
	하나의 테이블에서만 조회
	데이터를 가공하지 않음
	(Raw data 그대로)

2. 복합 뷰
	두 개 이상의 테이블에서 조회
	데이터를 가공함
	(중복 제거, 그룹핑 등)

- 뷰와 데이터 조작
	- 가공되지 않은 raw data인 경우만 데이터 조작 가능
	- distinct 처리하면 불가
	- 집계 함수를 적용하면 불가
	- 연산이나 함수를 사용해 가공하면 불가

@VIEW 생성
- 형식
	CREATE [ OR REPLACE ] VIEW 뷰명 [ ( 별칭 [, 별칭, ...] ) ]
	AS Sub Query [WITH CHECK OPTION]; >>> 서브 쿼리의 조건절을 제약 사항으로 갖는 뷰 생성(조건에 맞지 않는 삽입, 수정 체크)

@VIEW 삭제
- 형식
	DROP VIEW 뷰명;

@ VIEW 수정
- 형식
	ALTER VIEW 뷰명 [ ( 별칭 [, 별칭, ...] ) ]
	AS 서브 쿼리 [WITH CHECK OPTION] ;

@@@ Index @@@

@ Index
- 데이터의 검색 효율성을 높이기 위한 목적의 데이터 베이스 객체
- 하나 이상의 컬럼을 기준으로 정렬하여 데이터의 빠른 검색을 지원
- 책의 색인과 유사한 개념
- 테이블을 기반으로 선택적으로 생성
- Mysql의 경우 아래의 제약 조건은 인덱스 자동 생성됨
	Primary Key, Unique, Foreign Key

@ Index 장점
- 조회 속도 향상(특히 대량 데이터 처리 시 효과적)

@ Index 단점
- 잦은 DML은 인덱스 엔트리 변경을 동반하므로 성능 저하 발생
- 추가적인 저장 공간 필요

@ Index 활용 시 주의 사항
- WHERE, JOIN, ORDER BY, GROUP BY에 자주 사용되는 컬럼 고려
- 자주 검색되는 컬럼 고려
- 컬럼의 분포도가 10 ~ 15% 이내인 경우 적용하면 좋음
	중복되는 값이 적을 수록 분포도가 좋음
	Cardinality가 높은 컬럼 우선 고려
- 복합 컬럼 인덱스 고려
- 커버링 인덱스 고려
- 정기적인 모니터링과 그에 따른 최적화 필요

@ 인덱스 조회
- 형식
	SHOW INDEX FROM 테이블명;

@ 인덱스 생성
- 형식
	CREATE [UNIQUE] INDEX 인덱스명 ON 테이블명(컬러명[, 컬럼명, ...]);

@ 인덱스 삭제
- 형식
	DROP INDEX 인덱스명 ON 테이블명;
