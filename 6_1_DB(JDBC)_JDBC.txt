6_1_DB(JDBC)_JDBC.txt

@@@ JDBC @@@

@ JDBC @
- 자바 애플리케이션의 DB 접근 및 사용 방법에 대한 표준화 필요성 부각
- 자바 애플리케이션과 DB와의 독립성 필ㅇ
- 표준화된 인터페이스 제공
- java.sql 패키지

Java Application >>> JDBC  <<< Oracle, MySql, DB2

@ Java Data Base Connectivity @
관점 및 의미
1. 개발자 
	DB와의 통신을 하기 위해 Java Application에서 사용하는 방법
	DB 제품과 상관없이 표준화된 인터페이스를 이용하여 코드 작성
	각 DB 접속방법 및 구현에 대한 상세한 정보를 알 필요 없음

2. DataBase
	Java Application을 위한 표준화된 통신기능을 제공하기 위해 구현해야하는 약속, 명세
	표준화된 인터페이스를 준수하는 DMBS만의 고유한 클래스 구현
	다른 DB 벤터와 다른 독자적인 구현을 유지 할 수 있음

@ JDBC Driver @
- JDBC 인터페이스에 대한 DB 벤더들이 구현한 클래스 라이브러리
- JDBC를 이용하는 Java Application 개발 후 실행 시에 반드시 필요함
- 사용하려는 DB 벤더 홈페이지에서 다운로드 받거나 Maven의 의존성을 통해 관리
- DB 교체하면 해당 DB에 맞는 드라이버로 교체

@@@ JDBC API @@@

@ JDBC를 이용한 DB 연동 @
1. JDBC Driver Class 로딩(JDBC 4.0 이후 버전부터 생략 가능)
2. Connection 생성
3. Statement 생성  <<< 통로
4. SQL 실행
5. 결과 집합 처리
6. 자원 반납

@ JDBC를 이용한 DB 연동 step1 @
- JDBC Driver Class 로딩
	DBMS와 연결을 수립해주는 역할의 JDBC Driver Class 메모리에 로딩 및 등록
	명시적 로딩 Class.forName("com.mysql.cj.jdbc.Driver");
	묵시적 로딩 JDBC 4.0 이후 DiverManager의 getConnection시에 자동 처리

@ JDBC를 이용한 DB 연동 step2 @
>>> 예시 : 전화선
- Connection 생성
	String url = "jdbc:mysql://localhost:3306/ssafydb";
	String user = "ssafy"
	Sting password = "ssafy';
	Connection conn = DriverManager.getConnection(url, user, password);
- java.sql.Connection


@ JDBC를 이용한 DB 연동 step3 @
>>> 예시 : 전화기
- Statement 생성
	1. java.sql.Statement
	Statement stmt = conn.createStatement();
	
	가장 기본이 되는 Statement
	다른 Statement의 상위 클래스
	생성 시 실행할 SQL이 정해지지 않은 Statement
	매 실행 마다 실행할 SQL 전송
	SQL Injection 공격에 취약

	2. java.sql.PreparedStatement
	String sql = "SELECT * FROM emp WHERE empno = ? ";
	PreparedStatement stmt = conn.prepareStatement(sql);
	stmt.setInt(1, empNo);
	
	반복적인 SQL작업을 최적화하여 통로 생성 시 실생할 SQL을 미리 결정하는 Statement
	SQL문에서 바뀌는 데이터 부분을 ? 로 표기
	실행하기 전에 ?로 표기된 부분에 값 바인딩 필요 >>> setXXX()
	SQL Injection 대비 가능

	3. java.sql.CallableStatement
	CallableStatement cstmt = conn.prepareCall("{CALL pocessReturn(?, ?)}");
	cstmt.setInt(1, 250303001);
	cstmt.setString(2, "ssafy");
	cstmt.execute();

	DB 내의 Stored Procedure를 호출하는 SQL을 실행하기 위한 Statement
	속도는 가장 빠름
	DBMS에 종속적

@ JDBC를 이용한 DB 연동 step3 @
-SQL 실행
첫번째 방법(Statement)
	int rowCnt = stmt.executeUpdate(sql);
	ResultSet rs = stmt.executeQuery(sql);
	boolean hasResult = stmt.execute(sql);

두번째 방법(PreparedStatement)
	int rowCnt = pstmt.executeUpdate();
	ResultSet rs = pstmt.executeQuery();
	boolean hasResult = pstmt.execute();

SQL 유형
SELECT  >>> 메소드 : executeQuery >>> 리턴값 : ResultSet
INSERT, UPDATE, DELETE >>> 메소드 : exeuteUpdate >>> 리턴값 : int
모든 SQL >>> 메소드 : execute >>> 리턴값 : boolean

@ JDBC를 이용한 DB 연동 step5 @
- 결과 집합 처리
	실행한 SQL문이 SELECT문 인 경우 ResultSet에 대한 처리
	String sql = "SELECT empno, ename FROM emp";
	ResultSet rs = stmt.executeQuery(sql);
	while(rs.next()){
		EmpDTO emp = new EmpDTO();
		emp.setEmpNo(rs.getInt("empno"));
		...
	}
	java.sql.ResultSet
- ResultSet 처리
	커서를 이용한 레코드 탐색
	커서의 방향 기본값 : 순방향

@ JDBC를 이용한 DB 연동 step6 @
- 자원 반납
	사용한 모든 자원에 대한 반납 처리
	if(rs != null) rs.close();
	if(stmt != null) stmt.close();
	if(conn != null) conn.close();

	ResultSet.close() : Statement에 의해 묵시적 반납 가능
	Statement.close() 
	Connection.close() 





